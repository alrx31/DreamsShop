// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241221200038_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Domain.Entity.ConsumerUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ConsumerUser");
                });

            modelBuilder.Entity("Domain.Entity.Dream", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Desctiption")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("Image_Media_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Preview_Media_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Producer_Id")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Raiting")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Image_Media_Id")
                        .IsUnique();

                    b.HasIndex("Preview_Media_Id")
                        .IsUnique();

                    b.HasIndex("Producer_Id");

                    b.ToTable("Dream");
                });

            modelBuilder.Entity("Domain.Entity.DreamInCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Category_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Dream_Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Category_Id");

                    b.HasIndex("Dream_Id");

                    b.ToTable("DreamInCategory");
                });

            modelBuilder.Entity("Domain.Entity.DreamInOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Dream_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Order_Id")
                        .HasColumnType("uuid");

                    b.Property<float?>("Raiting")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Dream_Id");

                    b.HasIndex("Order_Id");

                    b.ToTable("DreamInOrder");
                });

            modelBuilder.Entity("Domain.Entity.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("File_Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("File_Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("File_Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("File_Size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Domain.Entity.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Consumer_Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<Guid>("Transaction_Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Consumer_Id");

                    b.HasIndex("Transaction_Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Domain.Entity.OrderTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Order_Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("OrderTransaction");
                });

            modelBuilder.Entity("Domain.Entity.Producer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Raiting")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Producer");
                });

            modelBuilder.Entity("Domain.Entity.ProducerUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("Producer_Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Producer_Id");

                    b.ToTable("ProducerUser");
                });

            modelBuilder.Entity("Domain.Entity.RatingsDreams", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Consumer_Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Dream_Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Consumer_Id");

                    b.HasIndex("Dream_Id");

                    b.ToTable("RaitingsDreams");
                });

            modelBuilder.Entity("Domain.Entity.RatingsProducer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Consumer_Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Producer_Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Consumer_Id");

                    b.HasIndex("Producer_Id");

                    b.ToTable("RaitingsProducer");
                });

            modelBuilder.Entity("Domain.Entity.Dream", b =>
                {
                    b.HasOne("Domain.Entity.Media", "Image_Media")
                        .WithOne("DreamAsImage")
                        .HasForeignKey("Domain.Entity.Dream", "Image_Media_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Media", "Preview_Media")
                        .WithOne("DreamAsPreview")
                        .HasForeignKey("Domain.Entity.Dream", "Preview_Media_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Producer", "Producer")
                        .WithMany("Dreams")
                        .HasForeignKey("Producer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image_Media");

                    b.Navigation("Preview_Media");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("Domain.Entity.DreamInCategory", b =>
                {
                    b.HasOne("Domain.Entity.Category", "Category")
                        .WithMany("DreamInCategories")
                        .HasForeignKey("Category_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Dream", "Dream")
                        .WithMany("DreamInCategories")
                        .HasForeignKey("Dream_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Dream");
                });

            modelBuilder.Entity("Domain.Entity.DreamInOrder", b =>
                {
                    b.HasOne("Domain.Entity.Dream", "Dream")
                        .WithMany("DreamInOrders")
                        .HasForeignKey("Dream_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Order", "Order")
                        .WithMany("DreamInOrders")
                        .HasForeignKey("Order_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dream");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Entity.Order", b =>
                {
                    b.HasOne("Domain.Entity.ConsumerUser", "ConsumerUser")
                        .WithMany("Orders")
                        .HasForeignKey("Consumer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.OrderTransaction", "OrderTransactions")
                        .WithMany("Orders")
                        .HasForeignKey("Transaction_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsumerUser");

                    b.Navigation("OrderTransactions");
                });

            modelBuilder.Entity("Domain.Entity.ProducerUser", b =>
                {
                    b.HasOne("Domain.Entity.Producer", "Producer")
                        .WithMany("ProducerUsers")
                        .HasForeignKey("Producer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("Domain.Entity.RatingsDreams", b =>
                {
                    b.HasOne("Domain.Entity.ConsumerUser", "ConsumerUser")
                        .WithMany("Raitings_Dreamses")
                        .HasForeignKey("Consumer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Dream", "Dream")
                        .WithMany("Raitings_Dreamses")
                        .HasForeignKey("Dream_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsumerUser");

                    b.Navigation("Dream");
                });

            modelBuilder.Entity("Domain.Entity.RatingsProducer", b =>
                {
                    b.HasOne("Domain.Entity.ConsumerUser", "ConsumerUser")
                        .WithMany("Raitings_Producers")
                        .HasForeignKey("Consumer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Producer", "Producer")
                        .WithMany("Raitings_Producers")
                        .HasForeignKey("Producer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsumerUser");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("Domain.Entity.Category", b =>
                {
                    b.Navigation("DreamInCategories");
                });

            modelBuilder.Entity("Domain.Entity.ConsumerUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Raitings_Dreamses");

                    b.Navigation("Raitings_Producers");
                });

            modelBuilder.Entity("Domain.Entity.Dream", b =>
                {
                    b.Navigation("DreamInCategories");

                    b.Navigation("DreamInOrders");

                    b.Navigation("Raitings_Dreamses");
                });

            modelBuilder.Entity("Domain.Entity.Media", b =>
                {
                    b.Navigation("DreamAsImage")
                        .IsRequired();

                    b.Navigation("DreamAsPreview")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entity.Order", b =>
                {
                    b.Navigation("DreamInOrders");
                });

            modelBuilder.Entity("Domain.Entity.OrderTransaction", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entity.Producer", b =>
                {
                    b.Navigation("Dreams");

                    b.Navigation("ProducerUsers");

                    b.Navigation("Raitings_Producers");
                });
#pragma warning restore 612, 618
        }
    }
}
